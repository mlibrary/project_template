# This is an example travis-ci config. It contains more than you need.
# See the readme for how to enable travis-ci builds.

sudo: false
language: ruby
rvm:
  - 2.4
  - 2.5
  - 2.6

branches:
  only:
    - master
    - develop

before_install: gem install bundler

script:
  - bundle exec rspec

# This adds an additional 'build' that is just the rubocop run
matrix:
  include:
    - rvm: ruby-head
      script: bin/rubocop

# You can also setup notifications, for example if you wanted an
# alert in your team's slack channel if a build fails. You'll have to
# follow the steps in the travis-ci docs to set up your own:
# https://docs.travis-ci.com/user/notifications/#Configuring-slack-notifications
#
# You should encrypt any tokens you generate.
# notifications:
#   slack:
#     on_success: change
#     on_failure: always
#     on_pull_requests: always

# If you develop against one database and run in production
# against another, I recommend setting up an appropriate build
# matrix in travis.
# See here: https://docs.travis-ci.com/user/customizing-the-build
#
# The machinery below provides an example of how to configure travis-ci to
# build and test a rails application against multiple different database
# engines. This can be useful as the different engines can have significantly
# divergent behavior; the classic example is sqlite not supporting foreign
# key constraints.

services:
  - mysql
  - postgresql

env:
  - DB=sqlite
  - DB=mysql
  - DB=postgres

before_install:
  - if [[ $DB = 'sqlite' ]]; then echo "gem 'sqlite3'" > Gemfile; fi
  - if [[ $DB = 'mysql' ]]; then echo "gem 'mysql2'" > Gemfile; fi
  - if [[ $DB = 'postgres' ]]; then echo "gem 'pg'" > Gemfile; fi

install:
  - bundle install --jobs=3 --retry=3

before_script:
  - cp config/database.yml.travis-$DB config/database.yml
  - if [[ $DB = 'sqlite' ]]; then bin/rake db:create; fi
  - if [[ $DB = 'mysql' ]]; then mysql -e 'CREATE DATABASE somedb;'; fi
  - if [[ $DB = 'postgres' ]]; then psql -c 'CREATE DATABASE somedb;' -U postgres; fi
  - bin/rake db:migrate

script:
  - if [[ $DB = 'sqlite' ]]; then bin/rspec --tag ~broken_in_sqlite; fi
  - if [[ $DB = 'mysql' ]]; then bin/rspec; fi
  - if [[ $DB = 'postgres' ]]; then bin/rspec; fi

matrix:
  include:
    - rvm: ruby-head
      script: bin/rubocop
