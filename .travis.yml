# This is an example travis-ci config. It contains more than you're likely to need.
# You may need to enable it by going to travis-ci.org.

sudo: false
language: ruby
rvm:
  - 2.4
  - 2.3

branches:
  only:
    - master
    - develop
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/

env:
  global:
    - CC_TEST_REPORTER_ID=your_test_reporter_id_here
    # See: https://docs.codeclimate.com/v1.0/docs/finding-your-test-coverage-token

before_install: gem install bundler

before_script:
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

script:
    - bundle exec rspec

after_script:
    - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT || true

# You can also setup notifications, for example if you wanted an
# alert in your team's slack channel if a build fails. You'll have to
# follow the steps in the travis-ci docs to set up your own:
# https://docs.travis-ci.com/user/notifications/#Configuring-slack-notifications
#
# You should encrypt any tokens you generate.
# notifications:
#   slack:
#     on_success: change
#     on_failure: always
#     on_pull_requests: always

# If you develop against one database and run in production
# against another, I recommend setting up an appropriate build
# matrix in travis.
# See here: https://docs.travis-ci.com/user/customizing-the-build
#
# The machinery below provides an example of how to configure travis-ci to
# build and test a rails application against multiple different database
# engines. This can be useful as the different engines can have significantly
# divergent behavior; the classic example is sqlite not supporting foreign
# key constraints.

services:
  - mysql
  - postgresql

env:
  - DB=sqlite
  - DB=mysql
  - DB=postgres

before_install:
  - if [[ $DB = 'sqlite' ]]; then echo "gem 'sqlite3'" > Gemfile; fi
  - if [[ $DB = 'mysql' ]]; then echo "gem 'mysql2'" > Gemfile; fi
  - if [[ $DB = 'postgres' ]]; then echo "gem 'pg'" > Gemfile; fi

install:
  - bundle install --jobs=3 --retry=3

before_script:
  - bundle exec rake config
  - cp config/database.yml.travis-$DB config/database.yml
  - if [[ $DB = 'sqlite' ]]; then bundle exec rake db:create; fi
  - if [[ $DB = 'mysql' ]]; then mysql -e 'CREATE DATABASE somedb;'; fi
  - if [[ $DB = 'postgres' ]]; then psql -c 'CREATE DATABASE somedb;' -U postgres; fi
  - bundle exec rake db:migrate

script:
  - if [[ $DB = 'sqlite' ]]; then bundle exec rspec --tag ~broken_in_sqlite; fi
  - if [[ $DB = 'mysql' ]]; then bundle exec rspec; fi
  - if [[ $DB = 'postgres' ]]; then bundle exec rspec; fi
